// ========================================== 
// PURPOSE 
// Normalize reference rate data into tidy long format (rates and volumes). 
// 
// INPUTS 
// - Table: tbl_Rates with columns: 
//   "Effective Date", "Rate Type", "Rate (%)", "Volume ($Billions)". 
// 
// OUTPUT 
// - Columns: obs_date (date), asset (text), 
//            metric (text: rate_percent|volume_usd_bil), 
//            type (text: reference_rate), value (number), unit (text). 
//   Units: rate_percent = "percent"; volume_usd_bil = "USD_billions". 
// - Sorted by obs_date desc, then asset, then metric. 
// 
// ASSUMPTIONS 
// - Date parsing tolerates multiple formats. 
// - Asset is upper-cased and trimmed. 
// - Rows with null obs_date are dropped. 
// ========================================== 
let 
  // =============================== 
  // SETTINGS 
  // =============================== 
  // Define units for each metric 
  UnitByMetric = [ 
    rate_percent   = "percent", 
    volume_usd_bil = "USD_billions" 
  ], 
  GetUnit = (m as text) as nullable text => 
    try Record.Field(UnitByMetric, m) otherwise null, 
  
  // Parse values into dates, trying multiple formats 
  ParseDate = (x as any) as nullable date => 
    let 
      d1 = try Date.From(x) otherwise null, 
      d2 = if d1=null then try Date.From(DateTime.FromText(Text.From(x), "en-US")) otherwise null else d1, 
      d3 = if d2=null then try Date.From(Date.FromText(Text.From(x))) otherwise null else d2 
    in 
      d3, 
  
  // =============================== 
  // SOURCE 
  // =============================== 
  // Load table tbl_Rates with columns: 
  //   Effective Date | Rate Type | Rate (%) | Volume ($Billions) 
  Source   = Excel.CurrentWorkbook(){[Name="tbl_Rates"]}[Content], 
  CleanHdr = Table.TransformColumnNames(Source, each Text.Trim(_)), 
  Renamed  = Table.RenameColumns( 
               CleanHdr, 
               { 
                 {"Effective Date",    "obs_date"}, 
                 {"Rate Type",         "asset"}, 
                 {"Rate (%)",          "rate_percent"}, 
                 {"Volume ($Billions)","volume_usd_bil"} 
               }, 
               MissingField.Ignore 
             ), 
  Kept     = Table.SelectColumns(Renamed, {"obs_date","asset","rate_percent","volume_usd_bil"}, MissingField.Ignore), 
  
  // =============================== 
  // TYPES 
  // =============================== 
  // Standardize columns: parse dates, upper-case asset, convert numbers 
  Typed = Table.TransformColumns( 
           Kept, 
           { 
             {"obs_date",       each ParseDate(_),                        type date}, 
             {"asset",          each Text.Upper(Text.Trim(Text.From(_))), type text}, 
             {"rate_percent",   each try Number.From(_) otherwise null,   type number}, 
             {"volume_usd_bil", each try Number.From(_) otherwise null,   type number} 
           } 
         ), 
  
  // =============================== 
  // TIDY LONG FORMAT 
  // =============================== 
  // Unpivot value columns into metric/value pairs 
  ValueCols     = {"rate_percent","volume_usd_bil"}, 
  PresentValues = List.Intersect({ ValueCols, Table.ColumnNames(Typed) }), 
  Unpivoted     = Table.Unpivot(Typed, PresentValues, "metric", "value"), 
  
  // Add type and unit 
  WithType = Table.AddColumn(Unpivoted, "type", each "reference_rate", type text), 
  WithUnit = Table.AddColumn(WithType,   "unit", each GetUnit([metric]), type text), 
  
  // =============================== 
  // CLEANUP 
  // =============================== 
  // Drop null dates, enforce types, sort, and reorder 
  CleanRows = Table.SelectRows(WithUnit, each [obs_date] <> null), 
  TypedOut  = Table.TransformColumnTypes( 
                CleanRows, 
                { 
                  {"obs_date", type date}, 
                  {"asset",    type text}, 
                  {"metric",   type text}, 
                  {"type",     type text}, 
                  {"value",    type number}, 
                  {"unit",     type text} 
                } 
              ), 
  Sorted = Table.Sort(TypedOut, {{"obs_date", Order.Descending}, {"asset", Order.Ascending}, {"metric", Order.Ascending}}), 
  Final  = Table.ReorderColumns(Sorted, {"obs_date","asset","metric","type","value","unit"}) 

in 
  Final
